@page "/login"
@inject Data.DataContext dbContext 
@inject NavigationManager navManager;
@inject IAuthService authService;

<div class="container vh-100 d-flex align-items-center justify-content-center">
    <div class="col-4 bg-light p-4">
        <h3 class="text-center mb-4">Log In</h3>
        <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="Login">
            <div class="form-group mb-3">
                <label for="username">User Name:</label>
                <InputText id="username" class="form-control" @bind-Value="Model.UserName" />
            </div>

            <div class="form-group mb-4">
                <label for="password">Password:</label>
                <InputText id="password" class="form-control" @bind-Value="Model.Password" />
            </div>

            <input type="submit" class="btn btn-primary w-100" value="Log In" />
            <p class="text-danger mt-3 text-center">@errorMessage</p>
        </EditForm>
        <div>
            <p>Don't have an account? <a href="/signup">Sign up</a></p>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm]
    public LoginViewModel Model { get; set; } = new();

    private string? errorMessage;

    private async Task Authenticate()
    {
        //Make api call to get the user account
        var userAccount = await authService.GetUserAccountAsync(Model.UserName);

        if(userAccount is null || userAccount.Password != Model.Password)
        {
            errorMessage = "Invalid User Name or Password";
        }
        else
        {
            //Create the user identity
            var claims = new List<Claim>
            {
                new Claim(ClaimTypes.Name, Model.UserName),
                new Claim(ClaimTypes.Role, userAccount.Role)
            };

            var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            var principal = new ClaimsPrincipal(identity);

            await HttpContext.SignInAsync(principal);
            navManager.NavigateTo("/");
        }
    }
}
