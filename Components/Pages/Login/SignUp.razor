@page "/signup"
@inject Data.DataContext dbContext
@inject NavigationManager navManager;
@inject IAuthService authService;

<div class="container vh-100 d-flex align-items-center justify-content-center">
    <div class="col-4 bg-light h-50 p-4">
        <h3 class="text-center mb-4">Sign Up</h3>
        <EditForm Model="@Model" OnValidSubmit="RegisterUser" FormName="Login">
            <div class="form-group mb-3">
                <label for="username">User Name:</label>
                <InputText id="username" class="form-control" @bind-Value="Model.UserName" />
            </div>

            <div class="form-group mb-3">
                <label for="password">Password:</label>
                <InputText id="password" class="form-control" @bind-Value="Model.Password" />
            </div>

            <div class="form-group mb-4">
                <label for="role">Role:</label>
                <InputSelect id="role" class="form-select" @bind-Value="Model.Role">
                    <option selected value="CUSTOMER">Customer</option>
                    <option selected value="LIBRARIAN">Librarian</option>
                </InputSelect>
            </div>
            <input type="submit" class="btn btn-primary w-100" value="Register" />
            <p class="text-danger mt-3 text-center">@errorMessage</p>
        </EditForm>
        <p>Already have an account? <a href="/login">Log In</a></p>
    </div>
</div>


@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm]
    public SignUpViewModel Model { get; set; } = new();

    private string? errorMessage;
    private bool success;

    private async Task RegisterUser()
    {
        //Makes API call to check if any accounts already exist for this username. If null then its available.
        var existingAccounts = await authService.GetUserAccountAsync(Model.UserName);

        if (existingAccounts != null)
        {
            errorMessage = "User name has already been taken. Please select another.";
        }
        else
        {
            try
            {
                //Makes call to API to add the new user
                await authService.AddUserAsync(new UserAccount()
                    {
                        UserName = Model.UserName,
                        Password = Model.Password,
                        Role = Model.Role
                    });
                

                //Create user identity
                var claims = new List<Claim>
                {
                    new Claim(ClaimTypes.Name, Model.UserName),
                    new Claim(ClaimTypes.Role, Model.Role)
                };

                var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
                var principal = new ClaimsPrincipal(identity);

                await HttpContext.SignInAsync(principal);

                navManager.NavigateTo("/");
            }
            //Navigation exception getting thrown when calling above. This is work around as I cant find any good answers. I think its a .NET 8 thing.
            catch (NavigationException)
            {
                navManager.NavigateTo("/");
            }
            catch(Exception ex)
            {
                errorMessage = $"Failed to create user account : {ex.Message}";

            }
        }
    }
}
