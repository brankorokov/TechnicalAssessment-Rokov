@page "/"
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveServer
@inject NavigationManager navManager
@inject IHomeService homeService
@inject IDialogService DialogService
@attribute [Authorize]
@layout Layout.MainLayout

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudTable Items="@bookList" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info" Filter="new Func<Book,bool>(FilterBooks)" Bordered="true">
        <ToolBarContent>
            <MudSpacer />
            <MudTextField @bind-Value="bookSearchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh></MudTh>
            <MudTh>Title</MudTh>
            <MudTh>Author</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Published</MudTh>
            <MudTh Class="text-nowrap">Published Date</MudTh>
            <MudTh>Category</MudTh>
            <MudTh Class="text-nowrap">Page Count</MudTh>
            <MudTh>ISBN</MudTh>
            <MudTh Class="text-nowrap">Checked Out</MudTh>
            <MudTh>Due By</MudTh>
            <MudTh Class="text-nowrap">Checked Out By</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="CoverPage"><MudImage Src="@context.CoverPage" /></MudTd>
            <MudTd DataLabel="Title">
                <AuthorizeView>
                    <Authorized Context="authContext">

                        <MudLink OnClick="@(() => OpenBookModal(context))">@context.Title</MudLink>
                    </Authorized>
                    <NotAuthorized Context="authContext">
                        <div>
                            <!-- Not authorized content here -->
                        </div>
                    </NotAuthorized>
                </AuthorizeView>
            </MudTd>
            <MudTd DataLabel="Author" Class="text-nowrap">@context.Author</MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
            <MudTd DataLabel="Publisher">@context.Publisher</MudTd>
            <MudTd DataLabel="PublicationDate">@Convert.ToDateTime(context.PublicationDate).ToString("MM/dd/yyyy")</MudTd>
            <MudTd DataLabel="Category">@context.Category</MudTd>
            <MudTd DataLabel="PageCount">@context.PageCount</MudTd>
            <MudTd DataLabel="ISBN">@context.ISBN</MudTd>
            <MudTd DataLabel="CheckedOutDate">@Convert.ToDateTime(context.CheckedOutDate).ToString("MM/dd/yyyy")</MudTd>
            <MudTd DataLabel="DueDate">@Convert.ToDateTime(context.DueDate).ToString("MM/dd/yyyy")</MudTd>
            <MudTd DataLabel="CheckedOutBy">@context.CheckedOutById</MudTd>
        </RowTemplate>
    </MudTable>
</MudContainer>

@code {
    private List<Book>? bookList;
    private string bookSearchString = "";

    protected override async Task OnInitializedAsync()
    {
        await GetBooks();
    }

    private async Task GetBooks()
    {
        bookList = await homeService.GetBooks();
    }

    private bool FilterBooks(Book book) => Filter(book, bookSearchString);

    private bool Filter(Book book, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (book.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private async Task OpenBookModal(Book book)
    {
        var parameters = new DialogParameters<BookDialog> { { x => x._book, book } };
        var options = new DialogOptions { MaxWidth = MaxWidth.Large, FullWidth = true, NoHeader = true};
        var dialog = await DialogService.ShowAsync<BookDialog>(null, parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await GetBooks();
        }
    }   
}
