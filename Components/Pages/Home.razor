@page "/"
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager navManager
@inject ILibraryService homeService
@inject IDialogService DialogService
@attribute [Authorize]
@layout Layout.MainLayout

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudTable Height="700px" FixedHeader="true" FixedFooter="true" Items="@bookList" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info" Filter="new Func<Book,bool>(FilterBooks)">
        <ToolBarContent>
            @* Renders the toolbar for librarian *@
            <AuthorizeView Roles="LIBRARIAN">
                <Authorized>
                    <MudButton Color="Color.Success" ButtonType="ButtonType.Button" OnClick="OpenAddBookDialog" Variant="Variant.Filled">
                        Add Book
                        <MudIcon Icon="@Icons.Material.Filled.Add"></MudIcon>
                    </MudButton>
                </Authorized>
            </AuthorizeView>
            <MudSpacer />
            <MudSelect Label="Search By: " T="string" @bind-Value="searchBy" Style="width: 50px">
                <MudSelectItem Value="@("Title")">Title</MudSelectItem>
                <MudSelectItem Value="@("Publisher")">Publisher</MudSelectItem>
                <MudSelectItem Value="@("Category")">Category</MudSelectItem>
                <MudSelectItem Value="@("Author")">Author</MudSelectItem>
                <MudSelectItem Value="@("ISBN")">ISBN</MudSelectItem>
            </MudSelect>
            <MudTextField @bind-Value="bookSearchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <HeaderFooterContent />
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="CoverPage"><MudImage Src="@context.CoverPage" /></MudTd>
            <MudTd DataLabel="Title"><MudLink OnClick="@(() => OpenBookDialog(context))">@context.Title</MudLink></MudTd>
            <MudTd DataLabel="Author" Class="text-nowrap">@context.Author</MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
            <MudTd DataLabel="Publisher">@context.Publisher</MudTd>
            <MudTd DataLabel="PublicationDate">@(context.PublicationDate is null ? "Unknown" : Convert.ToDateTime(context.PublicationDate).ToString("MM/dd/yyyy"))</MudTd>
            <MudTd DataLabel="Category">@context.Category</MudTd>
            <MudTd DataLabel="PageCount">@context.PageCount</MudTd>
            <MudTd DataLabel="ISBN">@context.ISBN</MudTd>
            <AuthorizeView Roles="CUSTOMER">
                <Authorized Context="auth">
                    @* Flow to display check out info for customer *@
                    @if (context.CheckedOutByUserId != null && context.CheckedOutByUserId == auth.User.FindFirstValue(ClaimTypes.NameIdentifier))
                    {
                        <MudTd>
                            <MudButton Variant="Variant.Filled" Disabled>Return By @context.DueDate</MudButton>
                        </MudTd>
                    }
                    else if (context.CheckedOutByUserId != null && context.CheckedOutByUserId != auth.User.FindFirstValue(ClaimTypes.NameIdentifier))
                    {
                        <MudTd>
                            <MudButton Variant="Variant.Filled" Disabled>Unavailable</MudButton>
                        </MudTd>
                    }
                    else
                    {
                        <MudTd>
                            <MudButton Variant="Variant.Filled" OnClick="() => Checkout(context)">Check Out<MudIcon Icon="@Icons.Material.Filled.ArrowRight"></MudIcon></MudButton>
                        </MudTd>
                    }
                </Authorized>
            </AuthorizeView>
        </RowTemplate>
        <FooterContent>
            <HeaderFooterContent />
        </FooterContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</MudContainer>

@code {
    private List<Book>? bookList;
    private string bookSearchString = "";
    public string searchBy = "Title";

    protected override async Task OnInitializedAsync()
    {
        await GetBooks();
    }

    private async Task GetBooks()
    {
        bookList = await homeService.GetBooks();
    }

    private bool FilterBooks(Book book) => Filter(book, bookSearchString);

    private bool Filter(Book book, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        return searchBy switch
        {
            "Title" => book.Title?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true,
            "Publisher" => book.Publisher?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true,
            "Category" => book.Category?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true,
            "Author" => book.Author?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true,
            "ISBN" => book.ISBN.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase),
            _ => true
        };
    }

    //Opens the book dialog to display info about the book.
    private async Task OpenBookDialog(Book book)
    {
        var parameters = new DialogParameters<BookDialog> { { x => x._book, book } };
        var options = new DialogOptions { MaxWidth = MaxWidth.Large, FullWidth = true, NoHeader = true };
        var dialog = await DialogService.ShowAsync<BookDialog>(null, parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await GetBooks();
        }
    }

    //Opens the add book dialog to add a new book.
    private async Task OpenAddBookDialog()
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true, NoHeader = false, CloseButton=true, DisableBackdropClick=true};
        var dialog = await DialogService.ShowAsync<AddBookDialog>(null, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await GetBooks();
        }
    }

    //Checkout the book for the customer.
    private async Task Checkout(Book book)
    {
        await homeService.CheckoutBook(book);
        await GetBooks();
    }
}
